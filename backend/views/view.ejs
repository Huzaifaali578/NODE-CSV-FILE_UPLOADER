<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>CSV File Viewer</title>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css"
    />
    <style>
      /* Dark theme background */
      body {
        background-color: #121212;
        color: #e0e0e0;
        font-family: "Montserrat", sans-serif;
        margin: 0;
        padding: 0;
      }

      .container {
        max-width: 700px;
        margin: 50px auto;
        padding: 20px;
        border-radius: 10px;
        background-color: #1e1e1e;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
      }

      /* Headings and Titles */
      h4 {
        color: #ffcc00;
        text-transform: uppercase;
        letter-spacing: 2px;
        margin-bottom: 20px;
      }

      /* Search Bar */
      .search-bar {
        border: 1px solid rgb(143, 143, 143);
        width: 100%;
        height: 38px;
        border-radius: 5px;
        margin-bottom: 20px;
        display: flex;
        overflow: hidden;
      }

      .search-bar input {
        flex: 1;
        border: none;
        outline: none;
        padding-left: 10px;
        background-color: #2e2e2e;
        color: #e0e0e0;
      }

      .search-bar button {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 60px;
        background-color: #ff4081;
        border: none;
        cursor: pointer;
      }

      /* Table */
      .table {
        border-collapse: collapse;
        width: 100%;
      }

      th,
      td {
        border: 1px solid #ffcc00;
        padding: 10px;
        text-align: left;
      }

      thead {
        background-color: #ffcc00;
        color: #121212;
      }

      tbody tr {
        background-color: #2e2e2e;
        border-bottom: 2px solid #121212;
        transition: background-color 0.3s ease;
      }

      tbody tr:hover {
        background-color: #ff4081;
      }

      /* Action buttons (Download & Print) */
      .btn-primary,
      .btn-secondary {
        border-radius: 50px;
        padding: 10px 20px;
        text-transform: uppercase;
        font-weight: bold;
        transition: transform 0.3s ease;
      }

      .btn-primary {
        background: linear-gradient(135deg, #ff4081, #ffcc00);
        color: #121212;
      }

      .btn-primary:hover {
        transform: translateY(-5px);
      }

      .btn-secondary {
        background-color: #00bcd4;
        color: #121212;
      }

      .btn-secondary:hover {
        transform: translateY(-5px);
      }

      /* Pagination */
      .pagination {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        margin: 20px 0;
      }

      .pagination .page-item {
        margin: 0 2px;
      }

      .pagination .page-item .page-link {
        color: #e0e0e0;
        background-color: #1e1e1e;
        border: 1px solid #ffcc00;
      }

      .pagination .page-item.active .page-link {
        background-color: #ffcc00;
        color: #121212;
        border-color: #ffcc00;
      }

      .pagination .page-item.disabled .page-link {
        background-color: #2e2e2e;
        color: #7d7d7d;
        border-color: #2e2e2e;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="row justify-content-between align-items-center mb-4">
        <div class="col-auto">
          <h4><b>Filename:</b> <%= title %></h4>
        </div>
        <div class="col-auto">
          <div class="btn-group" role="group">
            <button
              type="button"
              class="btn btn-primary"
              id="downloadButton"
              data-file="<%= title %>"
            >
              <i class="bi bi-file-earmark-arrow-down me-2"></i> Download
            </button>
            <button type="button" class="btn btn-secondary" id="printButton">
              <i class="bi bi-printer me-2"></i> Print
            </button>
          </div>
        </div>
      </div>
      <!-- Search Bar -->
      <form id="searchForm">
        <div class="search-bar bg-light">
          <input
            type="text"
            class="search-input"
            placeholder="Search in Data"
            value="<%= searchQuery || '' %>"
          />
          <!-- Search Bar Icon -->
          <button type="submit" class="text-secondary">
            <i class="bi bi-search"></i>
          </button>
        </div>
      </form>
      <!-- Table to Show CSV Data -->
      <table class="table table-striped table-bordered bg-light">
        <thead>
          <tr>
            <% for (let header of tableHeaders) { %>
            <th><%= header %></th>
            <% } %>
          </tr>
        </thead>
        <tbody id="table-body">
          <% for (let row of tableRows) { %>
          <tr class="table-row">
            <% for (let header of tableHeaders) { %>
            <td><%= row[header] %></td>
            <% } %>
          </tr>
          <% } %>
        </tbody>
      </table>
      <div class="text-center mt-4">
        <a href="/" class="btn btn-primary">
          <i class="bi bi-house me-2"></i> Back to Homepage
        </a>
      </div>
      <!-- Pagination -->
      <div class="d-flex justify-content-center mt-4">
        <nav aria-label="Page navigation">
          <ul class="pagination" id="pagination">
            <li class="page-item" id="prevLink">
              <a class="page-link" href="#" aria-label="Previous">
                <span aria-hidden="true">&laquo;</span>
              </a>
            </li>
            <!-- Page Numbers will be inserted here dynamically -->
            <li class="page-item disabled" id="pageInfo">
              <span class="page-link" id="currentPage">Page 1 of 1</span>
            </li>
            <li class="page-item" id="nextLink">
              <a class="page-link" href="#" aria-label="Next">
                <span aria-hidden="true">&raquo;</span>
              </a>
            </li>
          </ul>
        </nav>
      </div>
    </div>
    <script>
      // Print functionality
      const printButton = document.getElementById("printButton");
      printButton.addEventListener("click", () => {
        window.print();
      });

      // search functionality
      document.addEventListener("DOMContentLoaded", () => {
        const searchInput = document.querySelector(".search-input");
        const searchForm = document.getElementById("searchForm");

        // Initialize table rows and update pagination on page load
        let tableRows = Array.from(document.querySelectorAll(".table-row"));

        // Prevent form submission on submit
        searchForm.addEventListener("submit", (event) => {
          event.preventDefault(); // Prevent the form from submitting
          performSearch(); // Call the search function when the button is clicked
        });

        // Search function
        function performSearch() {
          const searchQuery = searchInput.value.toLowerCase();

          tableRows.forEach((row) => {
            const rowData = Array.from(row.querySelectorAll("td"))
              .map((td) => td.textContent.toLowerCase())
              .some((cellData) => cellData.includes(searchQuery));

            row.style.display = rowData ? "" : "none";
          });
        }
      });

      // pagination functionality
      const itemsPerPage = 10; // Number of rows per page
      let currentPage = 1; // Current page number

      // Reference to the table rows
      let tableRows = Array.from(document.querySelectorAll("table tbody tr"));

      // Initial rendering of rows and pagination
      renderPagination();

      // Function to render pagination links and manage navigation
      function renderPagination() {
        const visibleRows = tableRows;
        const totalPages = Math.ceil(visibleRows.length / itemsPerPage);

        const prevLink = document.getElementById("prevLink");
        const nextLink = document.getElementById("nextLink");
        const currentPageElement = document.getElementById("currentPage");
        const pagination = document.getElementById("pagination");

        // Update page info
        currentPageElement.textContent = `Page ${currentPage} of ${totalPages}`;

        // Clear existing page numbers
        pagination
          .querySelectorAll(".page-number")
          .forEach((el) => el.remove());

        // Add page numbers only if needed
        if (totalPages > 1) {
          for (let i = 1; i <= totalPages; i++) {
            const pageItem = document.createElement("li");
            pageItem.classList.add("page-item");
            if (i === currentPage) {
              pageItem.classList.add("active");
            }
            pageItem.innerHTML = `<a class="page-link page-number" href="#">${i}</a>`;
            pagination.insertBefore(pageItem, nextLink);
          }
        }

        // Disable "Previous" if on the first page
        prevLink.classList.toggle("disabled", currentPage === 1);

        // Disable "Next" if on the last page
        nextLink.classList.toggle("disabled", currentPage === totalPages);

        // Render the rows based on the current page
        renderRows();
      }

      // Function to show the rows corresponding to the current page
      function renderRows() {
        const startIndex = (currentPage - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;

        tableRows.forEach((row, index) => {
          row.style.display =
            index >= startIndex && index < endIndex ? "" : "none";
        });
      }

      // Event listeners for pagination clicks
      document
        .getElementById("pagination")
        .addEventListener("click", (event) => {
          event.preventDefault();

          if (event.target.classList.contains("page-link")) {
            const pageNumber = parseInt(event.target.textContent);

            if (!isNaN(pageNumber)) {
              currentPage = pageNumber;
            } else if (event.target.closest("#prevLink") && currentPage > 1) {
              currentPage--;
            } else if (
              event.target.closest("#nextLink") &&
              currentPage < Math.ceil(tableRows.length / itemsPerPage)
            ) {
              currentPage++;
            }
            renderPagination(); // Re-render the pagination and table rows
          }
        });
      // Downloading Functionality.
      document
        .getElementById("downloadButton")
        .addEventListener("click", () => {
          const fileName = document
            .getElementById("downloadButton")
            .getAttribute("data-file");
          window.location.href = `/download/${fileName}`; // Trigger the download
        });
    </script>
  </body>
</html>
